{"pageProps":{"pageNumber":1,"maxPages":2,"posts":[{"title":"How to Install Node.js","authorName":"Thiago Ferreira","authorId":"thiago-ferreira","publishedAt":"April 1, 2024 5:12 AM","category":"Tutorial","tags":["vscode","how-to"],"id":"how-to-install-node-js","content":"<h1 id=\"introduction\">Introduction</h1>\n<h2 id=\"macos\">MacOS</h2>\n<p>Access the <a href=\"https://nodejs.org/en/download\">Node.js's download website</a> and press \"Download\".</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-1.png\"></p>\n<p>This will download a <code>.pkg</code> file. Double-click on it and then wait for the window to open.</p>\n<p><img width=\"200\" height=\"200\" src=\"mac-2.png\"></p>\n<p>Just press \"Enter\" to go to the next screen.</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-3.png\"></p>\n<p>Just press \"Continue\" to go to the next screen.</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-4.png\"></p>\n<p>Confirm you accept the terms of use.</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-5.png\"></p>\n<p>Finally, press \"Install\". It will take some seconds to install it.</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-6.png\"></p>\n<p>When the installation process is over, MacOS will ask you the move the <code>.pkg</code> to the trash. Just press \"Move to Trash\".</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-7.png\"></p>\n<p>Congratulations! You have installed Node.js on your computer. If you would like to make sure the installation went well, just open the terminal and type <code>node --version</code>.</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-8.png\"></p>","readingTimeAsText":"1 min read","publishedFromNow":"3 days ago"},{"title":"AWS RDS (Relational Database Service)","authorName":"Thiago Ferreira","authorId":"thiago-ferreira","publishedAt":"March 31, 2024 8:00 AM","category":"Amazon AWS","tags":["aws","amazon","rds"],"id":"aws-rds","content":"<h1 id=\"introduction\">Introduction</h1>\n<p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the AWS Cloud.</p>\n<h1 id=\"before-you-begin\">Before You Begin</h1>\n<p>This tutorial was created to help you understand the basics of Amazon AWS. It is not intended to help you deploy any real project/product by any means. There are several other factors involved, such as security, when doing it. That said, please do not follow the same steps if you want to deploy a real application. Please talk with a specialist.</p>\n<p>If you did not create yet an AWS account, please follow <a href=\"/posts/create-a-new-aws-account\">this tutorial</a>. If you already have an account, just log into Console.</p>\n<h1 id=\"create-a-security-group\">Create a Security Group</h1>\n<p>Amazon Virtual Private Cloud (VPC) is a service that lets you launch AWS resources in a logically isolated virtual network that you define. On your Console Home, look for <code>Services</code> on the top navbar and then go to <code>Database → VPC</code>.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224590065-c127ee93-46e7-4e68-bd8f-e955bc3284e1.png\"></p>\n<p>On the left sidebar, search for <em>Security Groups</em> and click on it:</p>\n<p><img width=\"317\" src=\"https://user-images.githubusercontent.com/114015/224590189-99d3b466-f7a5-4db1-b6b6-7b0e5e7bf3b7.png\"></p>\n<p>On the right side, search for <em>Create security group</em></p>\n<p><img width=\"416\" src=\"https://user-images.githubusercontent.com/114015/224590344-2ea4123d-7446-4970-a74f-30794d72fc29.png\"></p>\n<p>For the <em>Security group name</em>, just type a name based on your preferences. For now, let's just  For <em>Description</em>, type something related to this security group.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224591949-cc736164-9e04-420b-9a8d-492b4cbab427.png\"></p>\n<p>Then click on <em>Add rule</em> under <strong>Inbound Rules</strong> and add the following rules.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224590692-d848c8bf-35fe-44bd-8951-1c16ee5f5f20.png\"></p>\n<p>In <em>Source</em>, select <code>Anywhere-IPv4</code> for the first and <code>Anywhere-IPv6</code> for the second rule. Finally, click on <em>Create Security Group</em>. We have created this security group because we want to have access to the database using <a href=\"https://www.pgadmin.org\">pgAdmin</a>, besides several other reasons. In a production/real environment, you should perform very different steps. Now you can create a Postgres database.</p>\n<h1 id=\"create-an-rds-database\">Create an RDS Database</h1>\n<p>On your Console Home, look for <code>Services</code> on the top navbar and then go to <code>Database → RDS</code>.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224587636-2fb3a5af-efba-4c7c-a33a-07c03230f728.png\"></p>\n<p>When you access RDS, the image below shows its homepage.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224587844-1888ebf3-67c5-47ee-ab8e-b1028a4fc962.png\"></p>\n<p>As you can see, no database exists.</p>\n<h1 id=\"creating-the-first-database\">Creating the First Database</h1>\n<p>On the homepage, click on <em>Create database</em>. You are going to pass through several steps until the end. Please pay attention to all the details.</p>\n<p><img width=\"411\" src=\"https://user-images.githubusercontent.com/114015/224588057-02a883a3-7c3c-4506-8c10-45442427b6c0.png\"></p>\n<p>Initially, you are going to use the <em>Standard create</em> option. You should select this option because you want to be under the free tier.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224588306-06486b0a-6a5f-4361-9794-d91fbf34bc58.png\"></p>\n<p>For the Engine option, you should select <strong>Postgres</strong> and set the engine version as default. The image below shows PostgreSQL Engine Version 14.6-R1. However, you should select the most recent version (or just keep the engine as it is).</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224588406-e0f1bef9-16cb-464d-8a3b-cac3af8e4b2b.png\"></p>\n<p><strong>Heads up!</strong> In this step, you should select <em>Free tier</em>.</p>\n<p><img width=\"739\" src=\"https://user-images.githubusercontent.com/114015/224588504-de093e39-57a5-4908-aac0-91ba802c359d.png\"></p>\n<p>Now it is time to set the settings of your database.</p>\n<ul>\n<li><strong>DB instance identifier</strong>: you may keep it as <code>database-1</code></li>\n<li><strong>Master username</strong>: you may keep it as <code>postgres</code></li>\n<li><strong>Master password</strong>: you may keep it as <code>postgres</code></li>\n</ul>\n<p>For <em>Credentials management</em>, keep \"Self managed\".</p>\n<p><img width=\"475\" src=\"https://user-images.githubusercontent.com/114015/224588929-a65ca38d-a622-49a7-867b-ee9467921aa5.png\"></p>\n<div class=\"alert alert-warning\">\n    In a production/real environment, <strong>NEVER</strong> use this username and password. Pick something hard to guess.\n</div>\n<p>For <em>Instance configuration</em>, just select the configuration under the free tier, i.e., <code>db.t3.micro</code>.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224589457-a2001c83-cccf-464d-9123-266d8fa4ac30.png\"></p>\n<p>Heads up! <strong>Uncheck</strong> the <em>Enable storage autoscaling</em>.</p>\n<p><img width=\"500\" src=\"1.png\"></p>\n<p>In <em>Connectivity</em>, set <code>Yes</code> for <em>Public access</em>.</p>\n<p><img width=\"439\" src=\"https://user-images.githubusercontent.com/114015/224592189-83ca3884-a9f3-43b0-8b62-9e3774678910.png\"></p>\n<p>Now select the Security Group you created at the beginning of this tutorial.</p>\n<p><img width=\"424\" src=\"https://user-images.githubusercontent.com/114015/224592553-0fd06d91-d946-415c-aff0-281258d8acaf.png\"></p>\n<p>Heads up! <strong>Uncheck</strong> the following option:</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224592920-4c295353-9415-4d97-8fdb-4df8409a2b5e.png\"></p>\n<p>Now expand <em>Additional configuration</em> and then set an <em>Initial database name</em></p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224593057-9c2b3af7-4d2c-4d31-85fc-193b82787f75.png\"></p>\n<p>And then <strong>uncheck</strong> the following options:</p>\n<p><img width=\"520\" src=\"https://user-images.githubusercontent.com/114015/224593164-299befd7-fc3b-440f-ab3c-d87282b89c20.png\"></p>\n<p>and <strong>uncheck</strong> this:</p>\n<p><img width=\"403\"src=\"https://user-images.githubusercontent.com/114015/224593284-9a0448d6-1c30-491b-b5e3-89a2e1efe30c.png\"></p>\n<p>Finally, click on <em>Create database</em>. if the following screen pops up for you, just close it.</p>\n<p><img width=\"500\" src=\"2.png\"></p>\n<p>This process will take a long time, sometimes, it can take 5 min or more until you have the database ready for use (it will show <code>Available</code> in the <em>Status</em>).</p>\n<p><img width=\"612\"src=\"https://user-images.githubusercontent.com/114015/224594216-4b9364c4-7b5d-4ed5-a9e3-878bbe23ab5d.png\"></p></p>\n<div class=\"alert alert-warning\" role=\"alert\">\n    <strong>Caveat</strong>: In this tutorial, I asked you to <strong>uncheck</strong> several options (including security options). This was intentional and only because I want you to be under the free tier and I also want you to have external access to your database. In a real/production environment, the settings will be very different.\n</div>\n<h1 id=\"connecting-to-your-database\">Connecting to your database</h1>\n<p>Once you see the status as <code>Available</code>, it is time to access the database by using pgAdmin. Thus, open it on your computer and then go to the left sidebar to register a new server.</p>\n<p><img width=\"542\" src=\"https://user-images.githubusercontent.com/114015/224595030-ebc562eb-0676-431e-a3aa-724e640e23ca.png\"></p>\n<p>Type a name for your connection (it could be any name):</p>\n<p><img width=\"319\" src=\"https://user-images.githubusercontent.com/114015/224595120-8070de18-4999-4875-97ed-26fba844bbc1.png\"></p>\n<p>Select the <em>Connection</em> tab and the first information needed is the host/IP address.</p>\n<p><img width=\"456\" src=\"https://user-images.githubusercontent.com/114015/224595212-3a35fe9b-9b25-4579-b6f2-6fef8bd8b1aa.png\"></p>\n<p>Let's go back to RDS and click on the database that was recently launched.</p>\n<p><img width=\"287\" src=\"https://user-images.githubusercontent.com/114015/224595299-6a77c66e-429f-469f-846c-228c201dcc7c.png\"></p>\n<p>Search for <em>Endpoint &amp; Port</em> information in <em>Connectivity &amp; Security</em>.</p>\n<p><img width=\"299\" src=\"https://user-images.githubusercontent.com/114015/224595403-e1a87939-c256-49ea-b0b2-5747af3cb8ba.png\"></p>\n<p>This will be your hostname/IP address and the port used. Type it on your pgAdmin, in addition to the password you have created before. Click on \"Save\".</p>\n<p><img width=\"395\" src=\"https://user-images.githubusercontent.com/114015/224595549-8b525827-8ab9-4a36-9756-acdfcae0c10b.png\"></p>\n<p>If everything goes well, you will be able to connect to your newly created database:</p>\n<p><img width=\"338\" height=\"338\" src=\"3.png\"></p>\n<p>Congratulations! Now it is time to add tables and some data to be used by your application.</p>\n<div class=\"alert alert-warning\">\n    In a real/production environment, the creation of tables will be an automated script, not a manual process.\n</div>\n<h1 id=\"creating-tables\">Creating Tables</h1>\n<p>To create a table, just right-click on the name of the database in which the table will be stored, and then click on <code>Query Tool</code></p>\n<p><img width=\"338\" height=\"338\" src=\"4.png\"></p>\n<p>Create the following table:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> books(\n  id      SERIAL <span class=\"hljs-keyword\">PRIMARY</span> KEY,\n  title   TEXT <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,\n  author  TEXT <span class=\"hljs-keyword\">NULL</span>\n);\n</code></pre>\n<p>Just for testing purposes, let's add only the first entry manually. Thus, type the following SQL command:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> books (title, author) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;Book A&#x27;</span>, <span class=\"hljs-string\">&#x27;Author A&#x27;</span>);\n</code></pre>\n<p>If you would like to double-check the information, just type the SELECT command to return all rows.</p>\n<p><img width=\"322\" src=\"https://user-images.githubusercontent.com/114015/224597052-20f3cff4-1fd3-4dca-a7fd-e340822aef02.png\"></p>\n<p>As you can see, the <code>id</code> column was not provided in the INSERT command. Since this column was created as <code>SERIAL</code> and <code>PRIMARY KEY</code>, Postgres assigns automatically a new ID for each row and avoids any duplicity.</p>\n<h1 id=\"connecting-the-application\">Connecting the Application</h1>\n<p>Since we have the database working successfully, let's connect the app to the database. However, you will not do it on your workspace. By following the instructions of the <a href=\"/posts/aws-ec2\">previous tutorial</a> about AWS EC2, create a new virtual computer and then clone the following repo on it:</p>\n<ul>\n<li><a href=\"https://github.com/umf-iti-200/amazon-rds\">https://github.com/umf-iti-200/amazon-rds</a></li>\n</ul>\n<p>After cloning, because this is a Node.js application, don't forget to install all dependencies by typing:</p>\n<pre><code class=\"hljs shell language-shell\">npm install\n</code></pre>\n<p>If you type <code>ls --all</code>, you are going to see a file called <code>.env</code>. This is used for storing information regarding the database connection.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224598111-0edcbe08-f0bd-49bf-8491-5f430c9983ee.png\"></p>\n<p>Because we are using the terminal/console to interact with the virtual computer, there is no graphical-based user interface to edit this file. In this case, let's use a tool named <code>nano</code>. Just type:</p>\n<pre><code class=\"hljs shell language-shell\">nano .env\n</code></pre>\n<p>By using the keyboard, you can navigate through all lines of the document. Thus, type the same information you typed on pgAdmin.</p>\n<p><img width=\"534\" src=\"https://user-images.githubusercontent.com/114015/224598544-f524c8e3-c432-4b1e-b048-3ed7af88ee9e.png\"></p>\n<p>To save the file, just press <code>CTRL + O</code> to \"Write Out\" and then ENTER. In addition to this, press <code>CTRL + X</code> to exit the program. Finally, just start the application by typing:</p>\n<pre><code class=\"hljs shell language-shell\">node server.js\n</code></pre>\n<p>Congratulations! You are now running the app entirely in the cloud.</p>\n<p><img width=\"534\" src=\"https://user-images.githubusercontent.com/114015/224601011-a4f50872-33ca-4f60-a06b-7f0069a1cb61.png\"></p>\n<h1 id=\"pricing\">Pricing</h1>\n<p>If you would like to know more about pricing for PostgreSQL, please access <a href=\"https://aws.amazon.com/rds/postgresql/pricing/\">https://aws.amazon.com/rds/postgresql/pricing/</a> for details.</p>\n<h1 id=\"clean-up\">Clean Up</h1>\n<p>Navigate to your RDS dashboard (where you can see the list of all your databases). Select the database and then click <strong>Delete</strong>.</p>\n<p><img width=\"500\" src=\"https://user-images.githubusercontent.com/114015/224602176-5ff3cbe0-0141-4abd-afa3-14793af1631b.png\"></p>\n<p>A confirmation dialog will pop up. Just uncheck \"Create final snapshot\", check \"I acknowledge that upon instance deletion, automated backups, including system snapshots and point-in-time recovery, will no longer be available.\", type \"delete me\", and, finally, click on \"Delete\".</p>\n<p><img width=\"388\" height=\"388\" src=\"6.png\"></p>\n<div class=\"alert alert-danger\" role=\"alert\">\n    <i class=\"bi bi-exclamation-triangle me-2\"></i>Don't forget to delete all databases after this tutorial.\n</div>\n<h1 id=\"references\">References</h1>\n<ol>\n<li><a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html\">What is Amazon Relational Database Service (Amazon RDS)?</a></li>\n</ol>","readingTimeAsText":"7 min read","publishedFromNow":"4 days ago"},{"title":"How to Install Visual Studio Code","authorName":"Thiago Ferreira","authorId":"thiago-ferreira","publishedAt":"March 28, 2024 5:12 AM","category":"Tutorial","tags":["vscode","how-to"],"id":"how-to-install-visual-studio-code","content":"<h1 id=\"introduction\">Introduction</h1>\n<p>Visual Studio Code (or simply VS Code) is a tool used primarily by programmers to develop software systems. This tool is free, open source, and can be installed in popular Operating Systems such as Windows, Linux, and MacOS. If you would like to know more about it, please access <a href=\"https://code.visualstudio.com\">their website</a>.</p>\n<p>In this tutorial, you will learn how to install it on your computer. Please read the section related to the operating system you are using.</p>\n<h2 id=\"installing-on-macos\">Installing On MacOS</h2>\n<p>Access <a href=\"https://code.visualstudio.com\">https://code.visualstudio.com</a>, click on the blue arrow facing down and then select the \"stable\" version.</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-1.png\"></p>\n<p>Your browser will download a <code>.zip</code> file. Open the Finder to see it. MacOS might automatically unzip it into a <code>.app</code> file, as you can see in the image below. Just drag and drop this icon to a folder called <code>Application</code> usually located in the left sidebar.</p>\n<p><img width=\"300\" height=\"300\" src=\"mac-2.png\"></p>\n<p>Click on the Application icon in the dock bar, search for the Visual Studio Code, and open it!</p>\n<p><img width=\"400\" height=\"400\" src=\"mac-4.png\"></p>\n<p>Because you are opening this app for the first time (and you did not download it from the Mac App Store), MacOS will ask if you trust it. Just Press \"Open\".</p>\n<p><img width=\"200\" height=\"200\" src=\"mac-5.png\"></p>\n<p>Congratulations. You have installed VS Code on your machine. Just select your preferred theme (dark or light) and that's it. Close the \"Welcome\" tab.</p>\n<p><img width=\"500\" height=\"500\" src=\"mac-6.png\"></p>\n<p>The image below shows that your VS Code is up and running.</p>\n<p><img width=\"500\" height=\"500\" src=\"mac-7.png\"></p>\n<h1 id=\"references\">References</h1>\n<ul>\n<li><a href=\"https://code.visualstudio.com\">https://code.visualstudio.com</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/setup/mac\">https://code.visualstudio.com/docs/setup/mac</a></li>\n</ul>","readingTimeAsText":"2 min read","publishedFromNow":"7 days ago"},{"title":"Create a new AWS Account","authorName":"Thiago Ferreira","authorId":"thiago-ferreira","publishedAt":"March 24, 2024 12:00 PM","category":"Amazon AWS","tags":["aws","amazon"],"id":"create-a-new-aws-account","content":"<p>On this page, you will learn how to sign up for Amazon Web Services (AWS) if you don't have any account yet.</p>\n<h1 id=\"getting-started\">Getting Started</h1>\n<p>To create a new AWS account, open your browser and access <a href=\"https://aws.amazon.com\" target=\"_blank\">https://aws.amazon.com</a>.</p>\n<p>Search at the top right-hand corner for <em>Sign In to the Console</em> and click on it.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222918525-151eb8b9-dd2c-4a71-a4a8-b0c947ee4daf.png\"></p>\n<p>On the next page, at the bottom, you will find a button to create a new account. Click on it:</p></p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222918852-cda4b815-c865-4e03-8429-3476d1353d4a.png\" style=\"width: 300px\"></p>\n<p>Now you need to type the email for the root user (in this case, it will be yourself. You may use your umich.edu account) and an account name (you may change it later). Once you typed all the information, press <em>Verify email address</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222919049-88336a21-778b-44ff-b16d-e47158f44472.png\"  style=\"width: 300px\"></p>\n<p>AWS will send an email with a 6-digit verification code to confirm you have access to the provided email. This code is valid for 10 minutes. Copy this code and paste it in the text field and then press <em>Verify</em>:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222919981-85bc9941-cbf7-42df-b51d-7b6c6d6d2c67.png\" style=\"width: 300px\"></p>\n<p>If the information provided is correct, you will start a 5-step procedure before finishing your account creation.</p>\n<h2 id=\"step-1-create-password\">Step 1: Create Password:</h2>\n<p>In this step, you need to type your password and then press the <em>Continue</em> button.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222920013-51a7bd76-19ff-43e3-b33e-9b6c08f3ed43.png\" style=\"width: 300px\"></p>\n<h2 id=\"step-2-add-contact-information\">Step 2: Add Contact Information</h2>\n<p>Select <em>Personal</em> as you will learn how to use this service. If you are creating an account for your future company/startup, you should select <em>Business</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222920393-eacad2e7-af1f-4acb-966b-2a12926d6a19.png\" style=\"width: 300px\"></p>\n<p>Add all information about yourself and don't forget to click on <em>I have read and agree to the terms of use</em> before pressing the <em>Continue</em> button.</p>\n<h2 id=\"step-3-add-billing-information\">Step 3: Add Billing Information</h2>\n<p>Add all information related to billing. As AWS states, you can't proceed with the sign-up process until you add a valid payment method.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/222937420-9a60f69c-dba6-4c0e-8c01-98286a901c9b.png\" style=\"width: 300px\"></p>\n<div class=\"alert alert-primary\">\n    AWS <strong>will not charge</strong> you for usage below AWS Free Tier limits. They may temporarily hold up to $1 (or an equivalent amount in local currency) as a pending transaction for 3-5 days to verify your identity.\n</div>\n<h2 id=\"step-4-verify-your-phone-number\">Step 4: Verify your phone number</h2>\n<p>In this step, AWS will ask you to confirm your phone number by using a PIN.</p>\n<h2 id=\"step-5-choose-your-plan\">Step 5: Choose your plan</h2>\n<p>In this step, select the AWS Free Tier. If everything goes well, your account will be activated within a few minutes. However, AWS says that the process can take up to 24 hours.</p>\n<p>Once your account is fully activated, you will receive a confirmation email. Don't forget to check your spam folder for the confirmation email.</p>\n<h1 id=\"references\">References</h1>\n<p>If you would like to know more details or troubleshooting problems while signing up, please access the following websites:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/\" target=\"_blank\">https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/</a></li>\n</ul>","readingTimeAsText":"3 min read","publishedFromNow":"11 days ago"},{"title":"AWS S3 (Simple Storage Service)","authorName":"Thiago Ferreira","authorId":"thiago-ferreira","publishedAt":"March 23, 2024 1:00 PM","category":"Amazon AWS","tags":["aws","amazon","s3"],"id":"aws-s3","content":"<h1 id=\"before-you-begin\">Before You Begin</h1>\n<p>On your <a href=\"/posts/what-is-workspace\">Workspace</a>, download or clone the following repository:</p>\n<ul>\n<li><a href=\"https://github.com/umf-iti-200/amazon-s3\">https://github.com/umf-iti-200/amazon-s3</a></li>\n</ul>\n<p>In addition to this, if you did not create yet an AWS account, please follow <a href=\"/posts/create-a-new-aws-account\">this tutorial</a>. If you already have an account, just sign in to Console.</p>\n<h1 id=\"create-an-s3-bucket\">Create an S3 Bucket</h1>\n<p>On your Console Home, look for <code>Services</code> on the top navbar and then go to <code>Storage → S3</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223164885-d4f80ca2-5c78-4206-81c1-db7466721dfb.png\"></p>\n<p>Amazon S3 is an <strong>object storage service</strong> that offers industry-leading scalability, data availability, security, and performance. You can store any kind of \"object\" on it, e.g., videos, photos, .pdf, etc.</p>\n<p>AWS organizes the objects into \"buckets\". It means that you can have, for instance, a bucket only for images, another bucket only for videos, and so on. It will always depend on your or the company's needs. So, Click <em>Create Bucket</em> to create your first bucket.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223166095-cd388567-ea55-41c3-a8d9-15ce784ba722.png\"></p>\n<p>In <em>General Configuration</em>, enter a bucket name of your choice, and select the region closest to your location.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223167435-6ff1f647-cc3b-485c-a630-003950875de9.png\"></p>\n<div class=\"alert alert-warning\">\n    <i class=\"bi bi-exclamation-circle me-2\"></i>The bucket names must be <strong>unique</strong> across all AWS accounts\n</div>\n<p>In <em>Block Public Access settings for this bucket</em>, Uncheck \"Block all public access\" and then check \"I acknowledge that the current settings might result in this bucket and the objects within becoming public\".</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223169286-a216eef6-bb88-4ed9-8f6e-7e0d8921b9fa.png\"></p>\n<p>Sometimes you would like to create a bucket to save your personal files as a backup. So, as default, AWS blocks all public access. Since we want to share our website with everyone, we need to uncheck this option so they will have access to it. Scroll all the way down and then click on <em>Create Bucket</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223168266-60177709-6571-4499-89ad-3cabac1da9d0.png\"></p>\n<p>Congratulations! You have created your first bucket at AWS S3 as you can see in the figure below.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223182689-fff01800-569f-4e91-a6e5-7eb8a69f4363.png\"></p>\n<p>The figure shows the S3's dashboard. It means that the next time you access S3, you will see the list of buckets you have created so far.</p>\n<h1 id=\"configure-the-bucket-to-host-a-static-website\">Configure the Bucket to Host a Static Website</h1>\n<p>In the S3's dashboard, click the name of the bucket you just created.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223186125-e18d04d1-e321-432d-81d5-6282a2f7cb77.png\"></p>\n<p>As you can see from the figure, because we just created the bucket, it has no objects (or files). Since we want to deploy a static website, we are going to use this bucket to store all files. However, before adding all files, let's tell S3 that this bucket will be used to host a static website. Click the Properties tab:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223186723-1485b49e-e7d7-423c-9f95-e0df8ad9fac8.png\" style=\"width: 250px;\"></p>\n<p>In this tab, scroll all the way down until you find <em>Static website hosting</em> section. As you can see, it is set as <code>Disabled</code> as default. Click on <em>Edit</em> button.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223187175-6238a382-0ad0-4af4-9d76-c2b8cb90d2f1.png\"></p>\n<p>In this next screen, you will enable the Static website hosting. Once you enable it, more configurations will show up.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223197816-7b5be75f-4934-4ddc-8262-adfb9efe0eb2.png\"></p>\n<p>Now, in <em>Index document</em>, type <code>index.html</code>. This is the file that will be served as default to the user when he/she accesses the website.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223205661-a830a0df-21e2-4a74-b715-666b29c4413c.png\"></p>\n<p>The last option is called <em>Error Document</em>. This is the file that will be served in case the user is trying to access/open a file that does not exist on your bucket. Just type <code>error.html</code>.</p>\n<p>Click on <em>Save Changes</em>. The page will move you back to the <em>Properties</em> tab. Now scroll all the way down again and then you will see in <em>Bucket website endpoint</em> the URL you need to use to access your website.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223205947-8573ba7f-08fd-4595-9446-863fbf21e701.png\"></p>\n<p>Since you have not uploaded any file yet, if you access the URL nothing will show up.</p>\n<h1 id=\"upload-files-to-the-s3-bucket\">Upload files to the S3 Bucket</h1>\n<p>Now it is time to upload all files from the project you have just downloaded/cloned. Go back to the <em>Objects</em> tab and then click on <em>Upload</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223200768-9f7660ee-4621-45f0-833e-e348e606feef.png\" style=\"width: 250px;\"></p>\n<p>Click on <em>Add Files</em> and select all files you have cloned, <strong>except</strong> the folder called <code>images</code>. You will upload it later in this lesson.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223201311-050ef529-39a1-483e-8625-a98f48a5ddc4.png\"></p>\n<p>Scroll all the way down and then click on <em>Upload</em>. You will see an Upload Status website. if everything goes well, just click on <em>Close</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223201578-9ec1b8a5-96a3-40e2-aa67-18bdfadd2eac.png\" style=\"width: 300px;\"></p>\n<p>The page will move you back to your bucket and then you will see the files listed.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223201919-12d28cbd-b6eb-42e9-b062-ad349bb18245.png\" style=\"width: 250px;\"></p>\n<h1 id=\"visit-your-website\">Visit Your Website</h1>\n<p>Since you have uploaded all the files, it is time to access the URL provided earlier. For this lesson, this is the URL:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223207259-ba0b57a7-35b4-4edd-a787-776c58748060.png\"></p>\n<p>In your case, depending on the bucket name, it could be a different URL. When you access the URL, you will see <code>403 Forbidden</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223207615-66c66eb5-5ee0-4691-acf4-5aed8dae62c4.png\"></p>\n<p>Even though you had public access when you created the bucket, you still need to set the permissions for its objects (in your case, the files you have just created and other files from your website). You can either set permission for each file or the entire bucket. We are going to set permission for the entire bucket. S3 calls the permission as \"Bucket policies\".</p>\n<h1 id=\"add-a-bucket-policy\">Add a Bucket Policy</h1>\n<p>To make objects in your bucket publicly readable (when the user accesses your website, they will \"read\" the files you have added), you must write a bucket policy that grants everyone <code>s3:GetObject</code> permission. When you grant public read access, anyone on the internet can access your bucket. On your bucket, select the <em>Permissions</em> tab.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223209381-af2b2c1f-474a-4f43-86ef-9ed073fdbda1.png\" style=\"width: 300px;\" ></p>\n<p>In <em>Bucket Policy</em>, click on <em>Edit</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223208885-492c7976-8b5b-4c3d-a6d8-bacf33ae379b.png\" ></p>\n<p>To grant public read access to your website, copy the following bucket policy, and paste it in the <em>Bucket policy editor</em>.</p>\n<pre><code class=\"hljs json language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;Version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2012-10-17&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;Statement&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">&quot;Sid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PublicReadGetObject&quot;</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;Effect&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Allow&quot;</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;Principal&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;*&quot;</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;Action&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-string\">&quot;s3:GetObject&quot;</span>\n            <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;Resource&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-string\">&quot;arn:aws:s3:::&lt;YOUR-BUCKET-NAME&gt;/*&quot;</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Update <code>&lt;YOUR-BUCKET-NAME&gt;</code> to match your bucket name. Click <em>Save Changes</em> at the bottom.</p>\n<p>Finally, open the URL again.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223291390-35f36270-cd1b-441d-9454-9b7a10093980.png\"></p>\n<p>Congratulations! This is your first static website at Amazon AWS.</p>\n<h1 id=\"adding-folders\">Adding Folders</h1>\n<p>Since you know how to upload files, it is time to upload a folder containing several other files.</p>\n<p>Select the <em>Object</em> tab on your bucket and then click on <em>Upload</em>. Then click on <em>Add folder</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223294026-48902b9c-ed79-43f2-8223-26dfd4d8c94e.png\"></p>\n<p>A dialog window will pop up. Select the folder called \"images\" in the project you have just cloned.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223294590-d0e10831-abc2-4ffa-9daa-550da60ba8de.png\"></p>\n<p>Press <em>Upload</em> at the bottom. If everything went well press <em>Done</em>. This is now your bucket:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223295216-144a9e1b-a84f-4b60-854f-c3ae7bfee3bb.png\"></p>\n<p>To access the files inside of the folder, just type on your browser:</p>\n<pre><code class=\"hljs\">http:<span class=\"hljs-regexp\">//</span>&lt;YOUR_URL&gt;<span class=\"hljs-regexp\">/images/</span>cat.jpg\n</code></pre>\n<p>You will see the following image:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223295447-759d7768-b159-47d4-bb06-a0e4c0d83c26.png\"></p>\n<h1 id=\"error-page\">Error Page</h1>\n<p>Do you remember when you added an <code>error.html</code> file while setting up the bucket? Look what happens if you try to access an invalid URL for instance</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">http:</span><span class=\"hljs-comment\">//&lt;YOUR_URL&gt;/welcome.html</span>\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223291715-119bb01b-313a-4d89-9f98-2d92da8d62a2.png\"></p>\n<p>Of course, <code>welcome.html</code> does not exist on your bucket. This is why AWS is displaying the error page.</p>\n<h1 id=\"pricing\">Pricing</h1>\n<p>If you would like to know more about pricing, please access <a href=\"https://aws.amazon.com/s3/pricing\">https://aws.amazon.com/s3/pricing</a> for details.</p>\n<h1 id=\"clean-up\">Clean Up</h1>\n<p>Navigate to your S3 dashboard (where you can see the list of all of your buckets). Click the bucket symbol next to your bucket name. Then click Empty.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/223296287-59dbd790-df03-4557-8a50-8dcfb0f57103.png\"></p>\n<p>Type \"permanently delete\" and confirm by clicking on <em>Empty</em>. If successful, click on <em>Exit</em>.</p>\n<p>Finally, select again the bucket row and click on <em>Delete</em>. Type the name of the bucket, and click Confirm.</p>\n<div class=\"alert alert-danger\">\n    <i class=\"bi bi-exclamation-triangle me-2\"></i>Don't forget to delete all buckets after this lesson.\n</div>","readingTimeAsText":"7 min read","publishedFromNow":"12 days ago"},{"title":"AWS EC2 (Elastic Compute Cloud)","authorName":"Thiago Ferreira","authorId":"thiago-ferreira","publishedAt":"March 22, 2024 8:00 AM","category":"Amazon AWS","tags":["aws","amazon","ec2"],"id":"aws-ec2","content":"<h1 id=\"introduction\">Introduction</h1>\n<p>Amazon EC2 (Elastic Compute Cloud) is a simple web interface to create and manage Amazon EC2 instances and resources. Using this service, you can create and manage your servers. Amazon EC2 offers the broadest and deepest <strong>computing platform</strong>, with over 500 instances and a choice of the latest processor, storage, networking, operating system, and purchase model to help you best match the needs of your workload.</p>\n<h1 id=\"before-you-begin\">Before You Begin</h1>\n<p>If you did not create yet an AWS account, please follow <a href=\"/posts/create-a-new-aws-account\">this tutorial</a>. If you already have an account, just sign in to Console.</p>\n<h1 id=\"create-an-ec2-server\">Create an EC2 Server</h1>\n<p>On your Console Home, look for <code>Services</code> on the top navbar and then go to <code>Compute → EC2</code>.</p>\n<p><img  src=\"https://user-images.githubusercontent.com/114015/224560899-a2534981-9fcb-46c7-98ff-5d8c6c07eadf.png\"></p>\n<p>When you access EC2, the image below shows its homepage.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224561673-c1280961-d58c-4422-9aab-df733bef2ba5.png\"></p>\n<p>If this is your first time accessing this service, you will see 0 instances running. But, what is an instance? An instance is a computer running in the cloud (or just a \"virtual computer\"). If you would like to create a new instance, on the homepage, search for <em>Launch Instance</em>. You are going to answer several questions while setting up a new instance.</p>\n<p><img width=\"250\" src=\"https://user-images.githubusercontent.com/114015/224561798-4642b88d-911d-4aea-a386-0d0862978e92.png\"></p>\n<p>The first information is the name of your instance. For this tutorial, just type <code>backend-server</code>. However, you may pick another name based on your preference.</p>\n<p><img width=\"250\" src=\"https://user-images.githubusercontent.com/114015/224561921-222fc68d-d4d7-4b30-a37c-fcc245554f7a.png\"></p>\n<p>The second step is to select the <em>Application and OS images</em>. In this one, you will set which Operating System are you planning to use. Because we want to use the free tier of Amazon AWS, it is important to keep the 'default' settings as stated in the image below. Anything other than that can cost you extra money.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224562139-dd5292db-4e34-4e97-a364-1097445489fb.png\"></p>\n<p>The next type is the <em>Instance Type</em>. Here you are going to select how \"powerful\" the instance is. Again, we want to be under the free tier. So, select <code>t2.micro</code>. As you can see, this machine has only 1 vCPU (or Virtual CPU) and 1 GiB as RAM. This is sufficient for this tutorial. Again, avoid selecting other types. It will cost you extra money.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224562246-ef58a892-f151-487c-94c7-cc7850cd0d61.png\"></p>\n<p>The next step is the <em>Key pair (login)</em>. Once you have your instances ready and running, you will need this information to access them because AWS EC2 uses <a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">SSH</a> to access instances. So, let's create a new key pair.</p>\n<p><img  src=\"https://user-images.githubusercontent.com/114015/224562538-e3f6d78d-43ba-4597-a713-dc72d9c6c92d.png\"></p>\n<p>A dialog window will open. Just type a name for your key pair and keep the remaining options set as default. As a suggestion for this tutorial, just type your <strong>first name</strong> and keep the current selection as it is. Press <em>Create key pair</em>.</p>\n<p><img width=\"250\" src=\"https://user-images.githubusercontent.com/114015/224562656-efaf808f-83e5-4cf6-927f-ab6ee344e35c.png\"></p>\n<p>If everything goes well, you will be asked to download a file <code>&lt;YOUR_NAME&gt;.pem</code> and then you should see the key pair you have just created as selected.</p>\n<p><img width=\"250\" src=\"https://user-images.githubusercontent.com/114015/224562750-f071b083-c902-44b2-adc0-ecd912c5c978.png\"></p>\n<p>The next step is to select <em>Network Type</em>. You will choose the type of traffic your \"virtual laptop\" will allow from the outside. Just for this tutorial, select HTTPS and HTTP. In a real or production environment, I would recommend you select only HTTPS.</p>\n<p><img width=\"250\" src=\"https://user-images.githubusercontent.com/114015/224562920-4fcb6d3c-b942-41a1-ad3f-5f10f2ea6b51.png\"></p>\n<p>For <em>Configure Storage</em>, just keep the default option.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224563093-dc514bf5-8f18-45f4-a8a9-f3f50bd22a54.png\"></p>\n<p>That's it. You did all the basic settings for your instance. On the right side, you can see a summary of all options you have selected so far. Just click on <em>Launch instance</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224563217-757ae920-3c37-447c-9aa4-29b1c80bdd6e.png\"></p>\n<p>If you go back to the EC2's homepage, you have now 1 instance running.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224563311-67081102-f124-45ad-bed4-1c681b8d94ed.png\"></p>\n<p>If you click on it, you can see that your instance is now running.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224563325-6aad312f-d839-448e-9c63-2a8ead202b8b.png\"></p>\n<h1 id=\"accessing-your-instance\">Accessing Your Instance</h1>\n<h2 id=\"linux-and-mac\">Linux and Mac</h2>\n<p>If you are using Linux or Mac, you need to change the permissions on your key pair file by typing the following command:</p>\n<pre><code class=\"hljs shell language-shell\">chmod 400 &lt;YOUR_NAME&gt;.pem\n</code></pre>\n<p>Don't forget to change <code>&lt;YOUR_NAME&gt;.pem</code>. If you don’t change the permission, the key pair is considered <em>too permissive</em>, or unsafe, because it is ostensibly readable by other users and then you won't be able to SSH into the EC2 instance as a result. Now you only need to follow the same steps for <a href=\"#windows\">Windows</a></p>\n<h2 id=\"windows\">Windows</h2>\n<p>Open the Terminal/Console, navigate to the folder that has your <code>.pem</code> file and then type:</p>\n<pre><code class=\"hljs shell language-shell\">ssh -i &lt;YOUR_NAME&gt;.pem ec2-user@&lt;public_ip_from_dashboard&gt;\n</code></pre>\n<p>You need to replace <code>&lt;public_ip_from_dashboard&gt;</code>. On your EC2 dashboard, select the instance you have just created.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224564789-f0f3b12b-2a52-4439-b437-7bfeca32779e.png\"></p>\n<p>Look for \"Public IPv4 address\". This is the IP you will need to access your instance.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224564855-2837c819-4fa1-4cad-82ad-99e996d09cd0.png\"></p>\n<div className=\"alert alert-warning\">\n    Use this IP <strong>only</strong> for SSH.\n</div>\n<p>Now it is time to access your instance. On the terminal, type again the aforementioned command with the correct IP. For the first question, just type \"yes\" and then press enter. Your computer will ask this only once.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224565060-bd94d7d9-c36c-42fc-9096-6c20450242fb.png\"></p>\n<p>Congratulations! Now you are accessing the instance you have just created! At this point, your terminal is now interacting directly with your EC2 instance (aka your \"virtual computer\") - <strong>rather than your physical machine</strong>.</p>\n<div className=\"alert alert-warning\">\n    The next commands will be executed in your instance, so keep the terminal open.\n</div>\n<h1 id=\"update-all-packages\">Update All Packages</h1>\n<p>Because you have just created your instance, it is a good practice to upgrade all packages to the newest versions. Thus, type in the terminal to elevate your privileges:</p>\n<pre><code class=\"hljs shell language-shell\">sudo su\n</code></pre>\n<p>and then type:</p>\n<pre><code class=\"hljs shell language-shell\">yum update -y\n</code></pre>\n<p>Note: if you are familiar with using <strong>homebrew</strong> on your Mac, you can think of the way we are using yum here as similar to <strong>brew</strong>.</p>\n<h1 id=\"install-nodejs\">Install Node.js</h1>\n<p>Follow <a href=\"https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\" target=\"_blank\"><span>this link</span></a> for more information. In summary, type the following commands in the terminal:</p>\n<pre><code class=\"hljs shell language-shell\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre>\n<p>This will download the installer. Then type the following to install Node.js:</p>\n<pre><code class=\"hljs shell language-shell\">. ~/.nvm/nvm.sh ; nvm install --lts\n</code></pre>\n<p>This command will install the LTS (Long Term Support) version. At the time of this tutorial being written, the LTS version is 20.</p>\n<h1 id=\"your-first-nodejs-application-on-ec2\">Your First Node.js application on EC2</h1>\n<p>Now it is time to run your first application on EC2 by using the content from GitHub. If you don't have an account yet, please <a href=\"https://github.com/signup\" target=\"_blank\"><span>create one</span></a>.</p>\n<p>Because your instance does not have Git installed, you need to install it:</p>\n<pre><code class=\"hljs shell language-shell\">yum install git\n</code></pre>\n<p>Note: Before installing any new tool/package, please make sure you are \"root\". If you are not, type <code>sudo su</code> in the terminal/console.</p>\n<p>Confirming by typing \"y\" in the following prompt:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224567199-68fa3f02-7fd9-4d5c-9386-f6e5fd9a9107.png\"></p>\n<p>Now type the following command to clone the source on it:</p>\n<pre><code class=\"hljs shell language-shell\">git clone https://github.com/umf-iti-200/amazon-ec2.git\n</code></pre>\n<p>If everything went well, you are supposed to see the folder downloaded on your instance. Just type <code>ls</code>:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224567311-63f5756f-2eed-46f1-b258-dce61cfce900.png\"></p>\n<p>Open the folder by typing:</p>\n<pre><code class=\"hljs shell language-shell\">cd amazon-ec2\n</code></pre>\n<p>Now you can install all dependencies</p>\n<pre><code class=\"hljs shell language-shell\">npm install\n</code></pre>\n<p>and, finally, you can run your application in the cloud:</p>\n<pre><code class=\"hljs shell language-shell\">node server.js\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224567576-21e31cd2-c4bc-457d-97a3-79f24d2a65a8.png\"></p>\n<p>Congratulations! Your app is now running in the cloud! Let's see it in action!</p>\n<h1 id=\"visualizing-your-server\">Visualizing Your Server</h1>\n<p>Open your EC2 dashboard on your browser. Select the instance you created earlier and search for Public IPv4 DNS (as in the image below). This is the URL the users will access your server (Don't share the IP since it can change constantly).</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224567914-3a952e18-dcc0-49df-8a2e-3cefe1b268cb.png\"></p>\n<p>Open your browser and type it:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">http:</span><span class=\"hljs-comment\">//&lt;SERVER_URL&gt;:3000</span>\n</code></pre>\n<p>Note: Don't forget the PORT <code>3000</code> and <code>http://</code>. What happened? Exactly! Nothing. Although your server is running.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224569241-2926d039-a2c3-4d6d-9433-1004d65e4b63.png\"></p>\n<p>The problem is that your browser cannot reach your server (virtual computer) because you haven't configured the Security Group to allow inbound rules for HTTP/HTTPS on your instance. By default, only the SSH port was allowed (Port 22).</p>\n<h1 id=\"allow-public-access\">Allow Public Access</h1>\n<p>Go back again to the EC2 dashboard, select your instance and then open the <em>Security tab</em> at the bottom. On <em>Security groups</em>, you will see what is the security group attached to your instance. Click on it.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224569595-1e13939a-6e09-40cc-95f9-9668f3acc428.png\"></p>\n<p>Now you have access to set all <em>inbound</em> and <em>outbound</em> rules for this specific security group. Select the <em>Inbound Rules</em> tab and then <em>Edit Inbound rules</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224569693-adf571bc-ed48-43be-89d1-d3ebfe9d1f7d.png\"></p>\n<p>Click on Add Rules and then type/select the following settings:</p>\n<ul>\n<li><strong>Type:</strong> Custom TCP</li>\n<li><strong>Port Range:</strong> 3000</li>\n<li><strong>Source:</strong> Anywhere IPv4</li>\n</ul>\n<p>Finally, Click on <em>Save rules</em>. You should come up with something similar to the image below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224569912-1e6a7300-50f8-4c5c-a144-4745f2a866c9.png\"></p>\n<p>Go back to your browser and refresh the website. Guess what? Now you should be able to see your server running! If you don't see the page running, change it from \"https\" to \"http\".</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224570097-9bdd6898-f751-44d7-8a20-7564006c8ba9.png\"></p>\n<h1 id=\"clean-up\">Clean Up</h1>\n<p>Navigate to your EC2 dashboard (where you can see the list of all your instances). Select the instance and then click <em>Stop Instance</em>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/114015/224570572-f7c904b8-f8d9-437d-9d09-a0c27bdb7b1b.png\"></p>\n<div className=\"alert alert-danger\">\n    <i className=\"bi bi-exclamation-triangle me-2\"></i>Don't forget to stop all instances after this lesson.\n</div>","readingTimeAsText":"8 min read","publishedFromNow":"13 days ago"}]},"__N_SSG":true}